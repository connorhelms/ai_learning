Month 1: Foundations - Python, Math, and Data Handling

Week 1: Python Fundamentals for ML

Topics:

Basic Python Syntax: Variables, data types (integers, floats, strings, booleans).
Operators: Arithmetic, comparison, logical.
Control Flow: if/elif/else statements, for loops, while loops.
Data Structures: Lists, tuples, dictionaries, sets (basic operations).
Functions: Defining functions, arguments, return values, scope.
Modules and Packages: Importing and using modules (e.g., math).
Introduction to NumPy:
Why NumPy? (Efficiency for numerical operations).
Creating NumPy arrays (np.array(), np.zeros(), np.ones(), np.arange(), np.linspace()).
Basic array attributes (shape, dtype, ndim).
Basic array operations (element-wise arithmetic).
Learning Objectives:

Write simple Python scripts that use variables, control flow, and functions.
Understand and use Python's fundamental data structures.
Create NumPy arrays and perform basic operations on them.
Activities & Code Snippets:

Basic Python Syntax & Operators:

Practice defining variables of different types.
Experiment with arithmetic, comparison, and logical operators.
<!-- end list -->

Python

# Variables and Data Types
age = 30
height = 5.9
name = "Alice"
is_student = True

print(f"Name: {name}, Age: {age}, Height: {height}, Student: {is_student}")
print(type(age), type(height), type(name), type(is_student))

# Arithmetic Operators
a = 10
b = 3
print(f"a + b = {a + b}")
print(f"a - b = {a - b}")
print(f"a * b = {a * b}")
print(f"a / b = {a / b}") # Float division
print(f"a // b = {a // b}") # Integer division
print(f"a % b = {a % b}")  # Modulus
print(f"a ** b = {a ** b}") # Exponentiation

# Comparison and Logical Operators
x = 5
y = 10
print(f"x < y: {x < y}")
print(f"x == 5 and y > 5: {x == 5 and y > 5}")
print(f"x < 3 or y > 15: {x < 3 or y > 15}")
print(f"not (x == y): {not (x == y)}")
Control Flow:

Write if/elif/else statements to make decisions.
Use for loops to iterate over sequences (like lists).
Use while loops for conditions.
<!-- end list -->

Python

# if/elif/else
grade = 85
if grade >= 90:
    print("Grade: A")
elif grade >= 80:
    print("Grade: B")
elif grade >= 70:
    print("Grade: C")
else:
    print("Grade: Needs Improvement")

# for loop
numbers = [1, 2, 3, 4, 5]
for num in numbers:
    print(f"Square of {num} is {num**2}")

# while loop
count = 0
while count < 3:
    print(f"Count is: {count}")
    count += 1
Data Structures (Basics):

Create lists, tuples, dictionaries, and sets.
Perform basic operations: accessing elements, adding/removing elements (where applicable), checking membership.
<!-- end list -->

Python

# Lists (mutable)
my_list = [1, "hello", 3.14]
my_list.append(True)
print(f"List: {my_list}")
print(f"First element: {my_list[0]}")
my_list[1] = "world"
print(f"Modified list: {my_list}")

# Tuples (immutable)
my_tuple = (10, 20, "setup")
print(f"Tuple: {my_tuple}")
print(f"Second element: {my_tuple[1]}")
# my_tuple[0] = 5 # This would cause an error

# Dictionaries (key-value pairs)
my_dict = {"name": "Bob", "age": 25, "city": "New York"}
print(f"Dictionary: {my_dict}")
print(f"Bob's age: {my_dict['age']}")
my_dict["occupation"] = "Engineer"
print(f"Updated dictionary: {my_dict}")

# Sets (unordered, unique elements)
my_set = {1, 2, 2, 3, 4, 4, 4}
print(f"Set: {my_set}")
my_set.add(5)
print(f"Set after adding 5: {my_set}")
print(f"Is 3 in the set? {3 in my_set}")
Functions:

Define your own functions with parameters and return values.
Understand local vs. global scope.
<!-- end list -->

Python

def greet(name):
    """This function greets the person passed in as a parameter."""
    message = f"Hello, {name}!"
    return message

greeting = greet("Charlie")
print(greeting)

def calculate_area(length, width):
    """Calculates the area of a rectangle."""
    area = length * width
    return area

rect_area = calculate_area(5, 10)
print(f"Area of rectangle: {rect_area}")
Modules and Introduction to NumPy:

Import the math module for mathematical functions.
Install NumPy (if you haven't already: pip install numpy).
Learn to create basic NumPy arrays.
<!-- end list -->

Python

# Using the math module
import math

print(f"Square root of 16: {math.sqrt(16)}")
print(f"Pi: {math.pi}")

# Introduction to NumPy
import numpy as np # Standard convention for importing NumPy

# Creating NumPy arrays
list_a = [1, 2, 3, 4, 5]
numpy_arr_a = np.array(list_a)
print(f"NumPy array from list: {numpy_arr_a}")
print(f"Type of numpy_arr_a: {type(numpy_arr_a)}")

numpy_arr_b = np.array([1.0, 2.5, 3.3, 4.8]) # NumPy will infer dtype
print(f"NumPy array (float): {numpy_arr_b}")
print(f"Data type of elements: {numpy_arr_b.dtype}")

zeros_arr = np.zeros((2, 3)) # Creates a 2x3 array of zeros
print(f"Zeros array:\n{zeros_arr}")

ones_arr = np.ones((3, 2), dtype=int) # Creates a 3x2 array of ones (integers)
print(f"Ones array (int):\n{ones_arr}")

range_arr = np.arange(0, 10, 2) # Like Python's range, but creates a NumPy array (start, stop, step)
print(f"Arange array: {range_arr}")

linspace_arr = np.linspace(0, 1, 5) # Array with 5 evenly spaced numbers between 0 and 1 (inclusive)
print(f"Linspace array: {linspace_arr}")

# Array attributes
print(f"Shape of numpy_arr_a: {numpy_arr_a.shape}")
print(f"Shape of zeros_arr: {zeros_arr.shape}")
print(f"Number of dimensions of zeros_arr: {zeros_arr.ndim}")
print(f"Data type of numpy_arr_a elements: {numpy_arr_a.dtype}")

# Basic element-wise operations
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

print(f"arr1 + arr2 = {arr1 + arr2}")
print(f"arr1 * 2 = {arr1 * 2}")
print(f"arr1 * arr2 = {arr1 * arr2}") # Element-wise multiplication
# For matrix multiplication, you'd use np.dot() or the @ operator (later)
Exercises for the Week:

Write a Python script that asks the user for their name and age, and then prints a message like "Hello [Name], you will be [Age+1] next year."
Write a script that takes a list of numbers and prints only the even numbers.
Create a function that calculates the factorial of a number.
Create a 1D NumPy array with 10 random integers between 1 and 100.
Create a 2D NumPy array (e.g., 3x3) and then print its shape, number of dimensions, and data type of its elements.
Perform addition, subtraction, and multiplication between two small 1D NumPy arrays of the same size.