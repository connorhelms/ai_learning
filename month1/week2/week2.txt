Month 1: Foundations - Python, Math, and Data Handling

Week 2: Advanced Python and Data Structures

Topics:

Advanced Python for Data Handling:
List Comprehensions: Concise way to create lists.
Lambda Functions: Small, anonymous functions.
map() and filter() functions.
Working with Files: Reading from and writing to text files (CSV introduction).
NumPy - Deeper Dive:
Indexing and Slicing: Accessing and modifying parts of arrays (1D and 2D).
Boolean Indexing: Selecting elements based on conditions.
Mathematical and Statistical Functions: np.min(), np.max(), np.sum(), np.mean(), np.std(), np.dot() (for dot product).
Reshaping arrays: reshape().
Stacking and splitting arrays: np.vstack(), np.hstack(), np.split().
Introduction to Pandas:
Why Pandas? (Handling tabular data).
Pandas Data Structures:
Series: 1D labeled array.
DataFrame: 2D labeled data structure (like a table or spreadsheet).
Creating Series and DataFrames (from lists, dictionaries, NumPy arrays).
Basic DataFrame operations:
Viewing data: head(), tail(), info(), describe().
Selecting columns and rows (basic indexing, loc, iloc).
Reading data from CSV files: pd.read_csv().
Learning Objectives:

Write more concise and efficient Python code using list comprehensions and lambda functions.
Perform advanced array manipulations with NumPy, including indexing, slicing, and mathematical operations.
Understand the core Pandas data structures (Series and DataFrame).
Be able to create DataFrames and perform initial exploratory data analysis (viewing, selecting, describing data).
Load data from a CSV file into a Pandas DataFrame.
Activities & Code Snippets:

Advanced Python for Data Handling:

Python

# List Comprehensions
squares = [x**2 for x in range(10)]
print(f"Squares using list comprehension: {squares}")

even_numbers = [x for x in range(20) if x % 2 == 0]
print(f"Even numbers: {even_numbers}")

# Lambda Functions
add = lambda x, y: x + y
print(f"Sum using lambda: {add(5, 3)}")

# map() with lambda
numbers = [1, 2, 3, 4]
doubled = list(map(lambda x: x * 2, numbers)) # Use list() to convert map object to list
print(f"Doubled numbers with map: {doubled}")

# filter() with lambda
ages = [12, 17, 21, 28, 8]
adults = list(filter(lambda age: age >= 18, ages))
print(f"Adult ages with filter: {adults}")

# Working with Files (simple text file example)
# Writing to a file
with open("my_data.txt", "w") as f:
    f.write("Hello, Python for ML!\n")
    f.write("This is week 2.\n")

# Reading from a file
with open("my_data.txt", "r") as f:
    content = f.read()
    print(f"\nContent from file:\n{content}")
NumPy - Deeper Dive:

Python

import numpy as np

# Indexing and Slicing
arr1d = np.arange(10) # [0 1 2 3 4 5 6 7 8 9]
print(f"Original 1D array: {arr1d}")
print(f"Element at index 3: {arr1d[3]}")
print(f"Elements from index 2 to 5 (exclusive): {arr1d[2:5]}")
print(f"Elements from index 5 to end: {arr1d[5:]}")
arr1d[0:2] = 99 # Modify elements
print(f"Modified 1D array: {arr1d}")

arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(f"\nOriginal 2D array:\n{arr2d}")
print(f"Element at row 1, col 2: {arr2d[1, 2]}") # or arr2d[1][2]
print(f"First row: {arr2d[0, :]}")
print(f"Second column: {arr2d[:, 1]}")
print(f"Sub-array (first 2 rows, last 2 columns):\n{arr2d[0:2, 1:3]}")

# Boolean Indexing
ages_arr = np.array([22, 35, 18, 42, 29, 60])
adult_ages_arr = ages_arr[ages_arr >= 18]
print(f"\nAges array: {ages_arr}")
print(f"Adult ages using boolean indexing: {adult_ages_arr}")
print(f"Ages greater than 30: {ages_arr[ages_arr > 30]}")

# Mathematical and Statistical Functions
data = np.array([10, 15, 12, 18, 11, 20])
print(f"\nData array: {data}")
print(f"Min: {np.min(data)}, Max: {np.max(data)}")
print(f"Sum: {np.sum(data)}")
print(f"Mean: {np.mean(data)}")
print(f"Standard Deviation: {np.std(data)}")

vec_a = np.array([1, 2, 3])
vec_b = np.array([4, 5, 6])
dot_product = np.dot(vec_a, vec_b) # 1*4 + 2*5 + 3*6
print(f"Dot product of vec_a and vec_b: {dot_product}")
# Alternatively: dot_product = vec_a @ vec_b

# Reshaping arrays
arr_to_reshape = np.arange(1, 10) # 1 to 9
reshaped_arr = arr_to_reshape.reshape((3, 3))
print(f"\nOriginal array for reshape: {arr_to_reshape}")
print(f"Reshaped array (3x3):\n{reshaped_arr}")

# Stacking and Splitting
a = np.array([[1,2],[3,4]])
b = np.array([[5,6]])
v_stacked = np.vstack((a, b)) # Stacks vertically (along rows) - b needs same num cols
print(f"\nVertically stacked:\n{v_stacked}")

c = np.array([[5],[6]])
h_stacked = np.hstack((a, c)) # Stacks horizontally (along columns) - c needs same num rows
print(f"\nHorizontally stacked:\n{h_stacked}")

arr_to_split = np.arange(9.0)
split_arr = np.split(arr_to_split, 3)
print(f"\nSplit array: {split_arr}")
Introduction to Pandas:

Install Pandas (if you haven't already: pip install pandas).
<!-- end list -->

Python

import pandas as pd # Standard convention

# Creating a Pandas Series
s_data = [10, 20, 30, 40, 50]
s_labels = ['a', 'b', 'c', 'd', 'e']
my_series = pd.Series(data=s_data, index=s_labels)
print(f"Pandas Series:\n{my_series}")
print(f"Value at label 'c': {my_series['c']}")

# Creating a Pandas DataFrame
data_dict = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David'],
    'Age': [25, 30, 35, 28],
    'City': ['New York', 'Paris', 'London', 'Berlin']
}
df = pd.DataFrame(data_dict)
print(f"\nPandas DataFrame from dictionary:\n{df}")

# Creating DataFrame from NumPy array
np_data = np.array([['Tom', 22], ['Jerry', 20], ['Spike', 25]])
df_from_np = pd.DataFrame(data=np_data, columns=['Character', 'Age'])
print(f"\nDataFrame from NumPy array:\n{df_from_np}")

# Basic DataFrame operations
print(f"\nFirst 2 rows (head):\n{df.head(2)}")
print(f"\nLast 2 rows (tail):\n{df.tail(2)}")
print(f"\nDataFrame info:")
df.info() # Prints a concise summary of the DataFrame
print(f"\nDescriptive statistics:\n{df.describe(include='all')}") # For numerical and categorical

# Selecting columns
print(f"\n'Name' column:\n{df['Name']}")
# print(f"\n'Name' column (alternative):\n{df.Name}") # Works if column name is valid Python identifier

# Selecting rows (basic examples, more with loc/iloc next)
print(f"\nFirst row (using iloc):\n{df.iloc[0]}")
print(f"\nRow with index 1 (using loc if index is default):\n{df.loc[1]}")

# Selecting multiple columns
print(f"\n'Name' and 'City' columns:\n{df[['Name', 'City']]}")

# Reading data from CSV (create a dummy data.csv first)
# Dummy data.csv content:
# ID,Value1,Value2
# 1,10,100
# 2,20,200
# 3,30,300
# 4,40,400
# 5,50,500

# Create a dummy CSV file for the example to run
csv_content = "ID,Value1,Value2\n1,10,100\n2,20,200\n3,30,300\n4,40,400\n5,50,500"
with open("data.csv", "w") as f:
    f.write(csv_content)

try:
    df_from_csv = pd.read_csv("data.csv")
    print(f"\nDataFrame from CSV:\n{df_from_csv}")
    print(f"\nInfo for DataFrame from CSV:")
    df_from_csv.info()
except FileNotFoundError:
    print("\nError: data.csv not found. Please create it to run this part.")